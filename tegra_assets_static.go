// Code generated by go-bindata.
// sources:
// _fixtures/jetson_clocks.sh
// DO NOT EDIT!

package tegra

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __fixturesJetson_clocksSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x7b\x73\xda\x4a\x96\xff\x1b\x7d\x8a\x63\x99\xba\x89\x53\x60\x8c\x67\xee\xce\xae\x33\xe4\x8e\x2c\x04\xd6\x2e\x48\x8c\x24\x92\x71\x25\x29\x68\x4b\x8d\xe9\x8d\xa4\x26\xad\xc6\x8f\xf5\xf5\x77\xdf\xea\x6e\x09\x24\x1e\x36\x4e\xed\xba\x2a\x05\x48\xe7\xfc\xfa\xf4\xef\xbc\xfa\x91\xe3\xa3\xd6\x0d\x49\x5b\x37\x28\x9b\x6b\xc7\x60\xd2\xc5\x23\x23\xb7\x73\x0e\xef\xc3\x13\x38\x3f\x6b\xff\xde\x3c\x3f\x6b\xff\xad\x01\xce\x67\xbb\x6b\x1b\x60\xba\xde\xc8\xf5\x8c\xc0\x76\x9d\x53\x30\xe2\x18\xa4\x70\x06\x0c\x67\x98\xdd\xe1\xe8\x54\x3b\xd6\x8e\xc1\xc3\x11\xc9\x38\x23\x37\x4b\x4e\x68\x0a\x28\x8d\x60\x99\x61\x20\x29\x64\x74\xc9\x42\x2c\x9f\xdc\x90\x14\xb1\x47\x98\x51\x96\x64\x0d\xb8\x27\x7c\x0e\x94\xc9\x4f\xba\xe4\xda\x31\x24\x34\x22\x33\x12\x22\x01\xd1\x00\xc4\x30\x2c\x30\x4b\x08\xe7\x38\x82\x05\xa3\x77\x24\xc2\x11\xf0\x39\xe2\xc0\xe7\x18\x66\x34\x8e\xe9\x3d\x49\x6f\x21\xa4\x69\x44\x84\x52\xa6\x1d\x4b\xb5\x04\xf3\x0b\xed\x18\xe0\xc3\x86\x5d\x19\xd0\x59\x61\x50\x48\x23\x0c\xc9\x32\xe3\xc0\x30\x47\x24\x95\x98\xe8\x86\xde\x89\x57\x39\x25\x02\x03\x20\xa5\x9c\x84\xb8\x01\x7c\x4e\x32\x88\x49\xc6\x05\xca\x7a\x4c\x39\xb5\xaa\x41\x11\xc9\xc2\x18\x91\x04\xb3\xd3\xdd\x66\x90\xb4\x4c\x46\x61\xc6\x82\xd1\x68\x19\xe2\xff\x1f\x4b\x40\x4d\x51\x01\x45\x34\x5c\x26\x38\xe5\xa8\xf0\x56\x8b\x32\xa0\x7c\x8e\x19\x24\x88\x63\x46\x50\x9c\xad\x29\x97\x9e\x12\xb8\xe5\x49\xe4\x33\x73\x30\x91\x6a\xe2\x75\x8a\x12\x2c\x2c\xda\x8e\x1c\x48\xe9\x5a\x44\x7a\x81\xf0\x4c\x99\x12\xd2\x54\x61\x52\x96\x41\x82\x1e\xe1\x06\x8b\xd0\x89\x80\x53\xc0\x69\x44\x59\x86\x45\x94\x2c\x18\x4d\x28\xc7\xa0\x38\xe2\x19\x44\x98\x91\x3b\x1c\x29\x90\x19\xa3\x89\x62\x25\xa3\x33\x7e\x2f\x62\x20\x0f\x2b\xc8\x16\x38\x14\x51\x05\x0b\x46\x44\xb4\x31\x11\x4f\xa9\x8a\xac\x2c\x53\x13\xd1\x8e\x21\xb8\xb2\x7d\xf0\xdd\x5e\xf0\xc5\xf0\x2c\xb0\x7d\x18\x79\xee\x67\xbb\x6b\x75\xe1\xf2\x1a\x82\x2b\x0b\x4c\x77\x74\xed\xd9\xfd\xab\x00\xae\xdc\x41\xd7\xf2\x7c\x98\x4e\x0d\x1f\x6c\xff\xdd\x3b\x30\x9c\x2e\x18\xce\xb5\x76\x0c\xd6\xbf\x46\x9e\xe5\xfb\xe0\x7a\x60\x0f\x47\x03\xdb\xea\xc2\x17\xc3\xf3\x0c\x27\xb0\x2d\xbf\x01\xb6\x63\x0e\xc6\x5d\xdb\xe9\x37\xe0\x72\x1c\x80\xe3\x06\x30\xb0\x87\x76\x60\x75\x21\x70\x1b\x62\x1c\xed\x78\x87\x22\xb8\x3d\x18\x5a\x9e\x79\x65\x38\x81\x71\x69\x0f\xec\xe0\x5a\x8e\xd9\xb3\x03\x47\x8c\xd6\x73\x3d\x30\x60\x64\x78\x81\x6d\x8e\x07\x86\xa7\x1d\xc3\x68\xec\x8d\x5c\xdf\x02\x31\x9b\xae\xed\x9b\x03\xc3\x1e\x5a\xdd\x53\x00\xdb\x01\xc7\x05\xeb\xb3\xe5\x04\xe0\x5f\x19\x83\xc1\xc6\xec\xdc\x2f\x8e\xe5\x81\x2b\x30\x4c\xd7\x09\x3c\xfb\x72\x1c\xb8\x9e\x0f\x97\x16\x0c\x6c\xe3\x72\x60\xa9\xd1\x9c\x6b\xe8\xda\x9e\x65\x06\x62\x52\xeb\x6f\xa6\xdd\xb5\x9c\xc0\x18\x34\xc0\x1f\x59\xa6\x6d\x0c\x1a\x92\x14\x6b\x38\x1a\x18\xde\x75\x43\xf0\x62\xba\x8e\x6f\xfd\x73\x6c\x39\x81\x6d\x0c\xa0\x6b\x0c\x8d\xbe\xe5\xc3\xfb\x97\xa9\x11\x33\xf2\x5c\x73\xec\x59\x43\x61\xb8\xdb\x03\x7f\x7c\xe9\x07\x76\x30\x0e\x2c\xe8\xbb\x6e\x57\x52\xee\x5b\xde\x67\xdb\xb4\xfc\x8f\x30\x70\x7d\xc9\xda\xd8\xb7\x1a\xd0\x35\x02\xa3\xa1\xa6\x34\xf2\xdc\x9e\x1d\xf8\x1f\x85\xf4\xe5\xd8\xb7\x25\x7d\xb6\x13\x58\x9e\x37\x1e\x89\x48\x3d\x81\x2b\xf7\x8b\xf5\xd9\xf2\xc0\x34\xc6\xbe\xd5\x95\x3c\xbb\x8e\x9c\x70\x70\x65\xb9\x9e\xf0\xb2\xdb\x93\x5c\x48\x47\x34\xe0\xcb\x95\x15\x5c\x59\x9e\x60\x56\x32\x66\x08\x2a\xfc\xc0\xb3\xcd\xa0\x2c\xe6\x7a\x10\xb8\x5e\xa0\x1d\x97\xe6\x0a\x8e\xd5\x1f\xd8\x7d\xcb\x31\x2d\xf1\xde\x15\x38\x5f\x6c\xdf\x3a\x01\xc3\xb3\x7d\x21\x60\xab\xa1\xbf\x18\xd7\xe0\x8e\xe5\xc4\x85\xbb\xc6\xbe\xa5\xcc\xa8\x84\x6d\x43\xba\x15\xec\x1e\x18\xdd\xcf\xb6\x30\x3e\x17\x1f\xb9\xbe\x6f\xe7\x71\x23\xa9\x33\xaf\x72\xe2\x4f\x35\xcd\x74\x9d\xde\xa4\x67\x0f\xac\x4e\xfd\xe9\xca\x1d\x5a\xcf\xad\xf8\xaf\x7c\x12\xcd\xb2\xd3\x90\xa6\x33\xcd\xb3\xba\x9d\x77\xdf\xf0\xd7\xb3\x8f\x7f\x69\x27\xef\xb4\xbe\x67\x59\x4e\xf1\xe0\x3c\x79\xa7\x5d\x0e\xc6\x56\xf1\xfb\xaf\xe2\x77\xa1\xd0\x56\x0a\x97\x6b\x8d\x76\xae\xb1\x52\x69\x2b\x15\xc7\x54\x00\xc9\x3b\x38\x06\x87\x82\x49\x63\xca\x34\x6d\x99\xa1\x5b\xfc\xfe\x44\x7b\xd2\x6a\x64\x06\x5f\x41\xaf\xb7\x75\x38\xea\x80\xae\xc3\xf7\x8f\xa2\x9a\xa4\x5a\xad\x86\xc3\x39\x85\x26\x86\xfa\x93\x67\x75\x9f\x85\x48\xfd\xc9\x31\x9f\xb5\xda\x8c\x68\x5a\xad\x16\x22\x0e\x9f\x7e\x83\x73\xf8\xfb\xdf\x2d\xb7\xa7\x0d\xd1\x03\x49\xc8\xff\x60\xf8\x6f\xcc\x33\x2a\xab\x80\x28\xc0\x28\x0d\x31\xdc\x3c\x42\x86\x39\x17\x55\x33\x13\x85\x31\x84\x04\x3d\xc0\x8c\xe1\x9f\x4b\x9c\x86\x8f\xa2\x1e\x99\xa3\x71\x03\xfa\xa3\xb1\x2c\xb4\xd6\xd0\x84\x30\xa6\xe1\x8f\xec\x54\x1b\x0b\x53\x2f\x34\x85\x3a\xc9\x9f\x66\x73\xf8\x4a\x17\xb2\x32\x7f\xd7\x00\xf2\xaf\x0d\x0d\xa0\xd9\xcc\xe6\xf4\x1e\xca\x7f\x11\xc9\x16\x31\x7a\x84\x70\xc9\x18\x4e\x79\x61\x4a\xa6\xa4\x39\x65\x18\xbe\xce\x48\x8c\xbf\x4b\x69\xf5\x60\x53\x56\x98\x88\x40\x48\xc1\xfb\x08\xcf\xd0\x32\xe6\x17\xf0\x6d\x97\x57\x4f\x24\x2c\xc3\x1b\xc0\xc5\x83\x0c\xdd\xe1\x68\x0d\x2b\xab\xeb\xe1\xc0\x6c\x99\xc2\x16\x13\x45\x39\x46\xe9\x63\xce\x84\xb0\x36\xc3\xfc\xed\x64\x0b\x47\x6a\x35\xfc\x40\x38\x9c\x69\xcf\x9a\x96\x5b\xad\x22\x65\x46\x99\x68\x29\x33\xd1\xee\xa6\xc2\xfb\x7a\xfd\x69\x15\xe1\xcf\xfa\xf4\x23\x44\x54\xab\xd5\xc4\x5c\x3a\x53\x19\x3c\x75\x29\xfe\x27\x84\x4b\x0e\xcd\x59\x1b\x9a\x11\x5c\x4c\xb5\x5a\x2d\x42\x1c\xed\x14\x39\x5f\x89\x84\x28\xc3\x62\x00\x81\xf6\xac\x03\x11\x01\x59\x6b\x65\x8f\x59\x2b\xc2\x77\x24\xc4\x99\xf8\xce\x71\xd2\x0a\x17\x4b\xf1\xef\x43\x8b\xa6\x31\x49\x31\xfc\xf9\x6d\x25\xf9\x03\xb3\x14\xc7\xad\x08\xdf\x2c\x6f\x5b\x61\xfc\xa3\x45\xef\x30\x63\x24\xc2\x1f\x5a\x82\x19\x7c\x22\x24\x55\x02\xc8\xf9\xd4\xc5\x60\x53\x68\xa6\x18\xea\xc2\xc4\x52\x2e\xd4\xf2\x74\xd0\xeb\x4f\xe2\xcd\xb3\x0e\x9f\xd6\xd6\xc9\xf7\x33\x22\x3f\x3e\x7e\x7c\xd5\xd0\x70\xb1\x14\xde\x68\x65\x21\x8a\x49\x7a\x3b\x49\x48\x3a\x11\x0f\xf6\x9a\xce\xf1\x2d\x43\x93\x42\xed\xc3\xc4\x1c\x8c\xfd\xc0\xf2\x5a\x61\xf8\x97\x16\x4e\xd1\x4d\x9c\xcf\x64\xbf\x85\x70\xfe\x49\x98\xd3\x4a\x97\x71\x5c\x32\xf3\xc3\x6b\x7a\xf2\x35\xc3\xbc\x53\xff\x63\xcd\x55\xfd\x89\x61\xfe\x2c\x69\x3a\xdb\x45\x91\xc5\x18\x65\x17\xd0\x43\x24\x56\x6b\x8d\x22\xf6\x25\xbf\xdb\x6c\xe1\x0c\x85\x5a\x2d\xa2\x29\x16\x21\xb7\x11\x70\x32\x33\x48\x0a\xf5\x7f\xe4\xe1\x25\x4d\x68\x96\x63\xa3\x64\x42\x31\x13\xf9\xe6\x42\x39\x55\xfd\x98\xea\xf0\xe9\xd3\x46\xc4\x6a\xca\x8e\x62\xe4\x88\x4e\x66\x28\x55\x43\x1f\xc3\x7f\xca\x34\x6b\x06\xff\xd5\x16\xe9\x02\x33\x94\x02\xc9\x00\xc5\xf7\xe8\x31\x03\xd7\x39\x5d\x55\xce\xa7\x04\x85\x73\x92\x0a\x4b\x3a\xa0\xab\xec\x6c\xf2\x1f\x6d\x1d\xbe\xc3\xda\x32\x86\xf9\x92\xa5\x79\xed\x94\x9a\x47\xd0\xbc\x87\x7d\xce\x9e\xa1\xb4\xc5\x11\xbb\xc5\x7c\xb2\xb8\x4f\x36\x8b\xb2\x6e\xa2\xf4\x1d\x07\x14\x86\x38\xcb\xa0\x87\xd2\x23\x31\x97\xca\x10\x45\xfe\x18\xa6\x68\xbd\x45\x06\x89\xda\x78\xb2\x26\xaa\x87\xd2\x0b\xb1\x8a\xc3\x51\x47\x72\x75\x98\x35\x53\xe9\x42\xe9\x3a\xe9\x2c\x09\xa8\x3c\xac\x1f\x86\xb0\x06\x50\x11\xd8\x33\x9c\x89\x3f\xb2\xac\x6e\xe7\xfc\xf7\xdf\xcb\x7e\x5c\xbd\x90\x61\x79\x18\x78\x81\x2d\xc3\x4a\xb9\x35\x8c\x97\x19\xc7\x2c\xbb\x27\x3c\x9c\x2b\x07\xbf\xc2\x8f\x8a\xb2\xa8\x3a\xa1\x1c\xa6\x12\x71\x35\x01\xf0\xd9\x2a\x72\x72\x9b\xc7\x5c\xa9\x85\x42\x4e\xee\xf0\xb4\x94\x70\x22\xac\x4c\xf5\x16\x7c\x69\x1a\x49\x6f\x2f\xc0\x90\x82\xab\x37\xca\xc4\xf5\x08\x2a\x29\x71\x9c\xe1\xd7\xa1\xba\x24\x13\xd5\x21\x92\x2a\x2a\xe5\x36\xdc\x76\xf8\x3c\x77\x38\xb8\x98\x1a\x49\x12\x1c\x11\xc4\xf3\xdc\x7e\x41\x72\x46\x59\xf8\xba\x94\xa2\x6a\xd3\xe8\x0f\x6f\x34\x58\x32\xd3\xde\x08\x9b\x2d\x93\xd7\xa2\x67\x7b\x44\xa5\xcd\x6b\xb1\xfe\x1e\x31\x65\x74\xd5\xe6\x52\x08\xce\x29\x5f\xc4\xcb\xdb\x83\x82\x4f\xf9\xd4\x55\xfd\xcc\x1c\x8d\xb3\x0b\x58\x87\xd5\x8e\xae\xa2\x3a\xdf\xce\xb4\x2c\x97\xd0\x17\x9a\xd2\xd7\xb3\xe6\x7f\x7c\xcf\x71\xf2\x3a\xbb\xf2\x50\xb9\x17\xc8\x52\xb9\xc3\x21\x7a\xfd\xc9\x77\xcd\x9e\x31\xb4\x07\xd7\xcf\x6a\x25\x29\x53\xb3\xfd\xef\xff\x56\x75\xca\x81\xf6\x7c\xd8\xb4\x65\x47\x97\xc6\x3f\x37\xdb\xcf\xda\xe5\xd5\x06\x56\x74\x9b\xc2\x7a\xf1\xb3\x5c\x1d\x16\x4b\xe5\x96\x9e\x67\xfd\x73\xd2\x77\x3f\x5b\x9e\xe3\x7a\x1d\x7d\xb3\x4f\xdf\x8a\xe5\x43\x4a\x99\xae\xd5\xcc\xd1\x78\x32\xb4\x9d\x89\xd0\xd8\x16\x2c\x1a\x7a\x21\x68\xfc\x6b\x9f\x20\x7a\x28\x0b\x9a\x63\x6f\x8f\x60\xb8\x64\x65\x41\xdf\x0a\xf2\x7a\xb9\x25\x99\x61\x2e\x0b\xba\xae\xd5\xe4\xde\x2b\x2f\x1e\xbe\x15\x04\xb6\xd3\xf7\x3b\xfa\x0b\xac\x4b\x20\x92\x72\xcc\x56\x19\xe8\x9b\x57\x56\x77\x1c\xd8\x83\x37\x20\x64\xe1\x1c\x47\x4b\x4e\x62\xfd\xf5\x3e\x24\xe3\x81\xc6\x91\x3a\x44\x79\x2d\x42\x57\xe1\x60\x8e\xc6\x9d\xe9\x0d\xca\xb0\x3c\x17\xa9\x3f\x29\x88\xe7\xe9\x7a\x91\x92\xaf\x10\xd4\xf3\x56\xfd\xa9\xe2\xdb\xea\xa2\x61\xd5\x6e\xcc\xd1\xf8\x02\xfa\x34\x55\x6e\xee\x14\xcb\x87\x3d\x18\x53\x1d\xbe\xe5\x71\xa7\x0f\x49\xda\x63\xf8\xe7\xb6\x4a\x39\x50\xaa\x1a\xe8\xe1\x05\x8d\x3c\x62\x2a\x1a\xa6\xda\x92\xec\xd7\x2a\xc2\xe7\x79\x5a\x5e\x63\x55\x52\x76\x77\xbf\x4e\x68\xb4\x8c\x71\xeb\x27\xcd\x5a\x0b\xc4\x50\x82\x45\xaf\xcc\x57\x96\xc2\x87\xd5\xb4\x55\x06\xbd\x5a\x4c\xf6\x25\xc5\xab\xe5\x65\x5f\x51\xd9\x5b\x53\x5e\x59\x7a\x14\x86\x0c\x77\xac\x9b\xf7\xb6\xa2\x5d\x00\x97\xfb\x00\xb6\x9a\x54\xb5\x9f\xbc\x44\xef\xdb\x67\xbb\xb3\x57\x1d\x3a\xdf\xad\x7d\xc0\xc1\x68\xbb\x26\xbf\x89\xa6\xce\x05\x7e\x35\xa7\xf3\x1d\xe5\x9e\x4c\x28\xb6\x25\xbb\x33\x6b\x6b\x83\x53\x8e\xfa\x52\xa9\xbf\x2d\x4a\x7d\x51\x96\xca\x94\xcb\xca\x54\x90\x2e\xfd\xd8\xaf\x94\xf9\xca\x4c\xda\x7f\x3b\x93\x7f\xa7\xb7\x8b\xf6\xd9\x8d\x78\x2c\x69\xda\x78\x5c\xea\x04\x39\xda\xaa\x17\xfc\x0a\xda\xba\x5d\x28\xb4\x75\xc3\xf8\x05\xb4\x52\x4f\x51\x68\x9e\x61\x0f\x26\x7d\x23\xb0\x5e\x86\x63\x88\xc4\xb7\x88\xe3\x49\x29\x03\x64\xec\x4b\xea\xce\xdb\x67\xaf\x51\xf7\xfb\x1a\x6f\xb9\x32\xae\xf2\xf0\x50\xda\x0e\x40\x3a\x90\xb2\xd7\x91\x0e\xa6\xab\xa2\xb5\x97\xac\x52\xa1\x50\x1b\xe6\x23\x58\xa6\xd9\x72\xb1\xa0\x8c\xe3\x08\x7c\xd7\x84\x4a\x74\x4a\xe9\x07\xc2\xa1\xfd\xb1\x12\xd7\x07\x2e\x26\xfb\xa3\x31\x6c\x34\xa9\xfe\xce\xd6\xb4\xd9\x98\xfa\x3b\xdb\xd1\xae\x66\xd4\xdf\x6e\x41\xbb\x7b\xce\xc6\xd0\xfa\xd6\xab\x15\xb3\xcf\x3b\xf9\x3a\x53\xa5\x60\x87\x64\x5e\x42\xfa\x3b\x0a\xc7\xf6\x90\xeb\x63\x8d\x97\x4f\x35\xf6\x1c\x6a\x24\xe8\x41\x1e\xa1\xad\x0e\xd6\x8e\xf4\xbd\x8b\x7f\x9c\x84\x6f\x29\x3b\xd6\xd0\x9c\xd8\xbe\x3b\x31\x8d\x51\xa7\xd2\x95\xd2\xbb\x45\x42\x23\x1c\x0b\xc0\x49\x88\x16\x2d\xf1\x49\x32\x2a\xbe\xeb\x85\xe6\x46\xd6\x55\x6a\xfa\xcd\x22\x59\x94\xce\xc3\x70\x12\xca\x5c\x63\xc5\xde\x4d\xea\x57\x73\xed\x55\x7d\xf4\x50\xd5\xdf\xc8\xb0\xad\x43\x38\xa1\x14\xc6\x3f\xaa\x4a\xe3\x51\xd7\x08\xac\xb7\x8c\x5b\x51\x97\x2b\x33\xb1\x30\xf3\xec\xae\x75\xa8\xe1\xec\xa7\xb4\x61\x12\xd3\xf0\x47\xbe\x47\xde\xae\x63\xaf\x31\xaa\xba\xe4\xcd\x7d\x72\xcb\xa4\x37\xde\x44\xe7\x96\xf2\x5b\xb9\x2c\x0e\x34\x4f\x7f\x85\xd4\x9d\x00\xcb\x45\x24\x38\x79\x1b\xbb\x3b\x91\xe4\x11\xeb\xff\x65\xc1\xcb\x53\xea\xb0\x82\x67\x0d\xcd\xcd\x82\x57\x76\xe5\xfe\x82\x57\xf6\xd9\xcb\x05\xaf\xec\xa0\x92\xa4\x10\x71\x73\x32\xca\xa2\x15\x16\x5f\x29\x90\xdb\xf2\x9b\x44\xbe\x6d\xcd\xa8\xca\x45\xa7\x38\xb5\x2f\x15\x98\x67\xbd\xb4\x69\xd2\xeb\xb9\xa4\xbe\x6b\x7b\x5d\x52\xde\xac\xae\x1b\xd1\x96\xef\xbb\x57\x87\x54\xc5\x06\x6b\x85\xfe\x09\xf6\x6b\xa9\x0a\xba\xd2\x7d\xeb\xa8\xf9\x22\xb4\x7c\x14\xf0\x02\x9b\x45\x91\x4e\x10\x49\x41\xd5\xe8\xfb\xb9\xd8\xe8\x7c\x85\x66\xaa\xae\xc5\x8a\x15\x6a\x1e\x76\xed\xe2\x32\x42\xdd\x34\x95\x4f\xd0\x45\x0c\xcf\x50\x42\xe2\xc7\x8b\xb2\x63\x00\x86\xea\x84\xf8\xa2\x74\x56\xbc\x3a\x3b\x74\x9d\x8e\xc0\xd1\xd6\xa7\xf2\xf9\xa5\x94\x42\xce\xed\x38\xd7\xe1\x3b\xfc\xf6\x1b\x94\x6e\x14\xcf\x2b\x10\x42\x43\x6d\x66\xe6\x64\xc6\xa1\x5d\xc1\xcb\x0f\xe0\xdf\x84\x98\xeb\xec\xc3\x9c\xff\xd9\x6c\xce\x71\xbc\x50\x98\xf2\x3e\x51\x31\xa1\xee\x8e\xb6\xee\x18\xa4\x04\xe8\xe3\xf4\x47\x4a\xef\xd3\xfc\x9e\xea\x02\xea\x6d\x7d\xad\x56\x1a\x40\x65\xfa\x7a\xe0\x7c\x67\xf8\x15\xa6\xf7\x73\x8a\x12\x32\x85\xa3\x0e\x30\x4a\xb9\x9a\xc4\xb7\xe2\x64\x3c\x6f\xd3\xde\x32\xcd\xff\xcf\x42\xc8\xc8\x82\x7f\x7b\x5f\x3f\xfb\x76\x02\x28\x03\xa4\x94\x96\x19\x66\x42\x2f\x1f\x36\xaf\x29\x75\x35\xf5\xbc\x9e\x6c\x9c\x91\xe2\x8d\xcb\x83\x1d\x6b\x84\x9e\x08\x9c\xfa\x4a\x06\x50\xcc\x30\x8a\x1e\xc5\x28\x19\xcf\x4e\xc1\x44\x29\xd8\x20\x0a\xe5\x3d\x23\x1c\x03\xe1\x7f\xc0\x75\xcb\xb9\x28\xae\x59\x50\x04\x28\xcd\xee\x31\xcb\x03\x5f\x98\xa4\x1e\xe4\x21\x57\xab\x3d\xfe\x79\x7d\x92\x1f\x08\xb0\x04\x9a\xb3\xd2\x70\xf9\x63\xc5\xfa\x8a\xf7\x8d\xf5\xcb\xec\x45\x13\x8f\xf4\x42\x67\xed\x8e\x15\x62\xee\x92\xf2\x6e\xb7\x1c\x57\xc5\x9d\xc6\x01\x3c\xe5\xb6\x94\xcc\x90\x66\xa5\x94\xc3\x8c\x2e\xd3\x08\x8e\x36\x83\x42\x8d\x59\x0a\xc9\x75\x98\x95\x56\xc2\xeb\x63\x56\xf9\xbd\x72\xea\xaf\x9e\x2c\x96\xf2\xf3\x36\xff\xc4\x89\xbc\x78\x9a\xcc\x50\x2a\x8a\xc0\xca\xd1\xd5\x3d\x2b\x0d\xcf\x5a\x2a\xad\x4b\x93\x59\xa5\x77\x47\xdf\x71\x36\xbb\x56\x11\x75\xfe\x05\xdc\xbc\x1e\x94\x59\xca\x1f\x75\xf6\xc0\xe6\xaf\xa7\xf2\x9e\x07\xc7\x6b\xec\x05\xa3\x61\x2e\xda\xe4\x0c\xe3\x56\x48\x93\x05\xe2\x44\x6c\x3b\xd6\xf0\xb7\x0c\x2f\x40\x4f\xef\x48\x44\x50\xa3\x58\xe9\xe8\xf0\x92\x36\xfc\x56\xde\x5b\xab\xc5\xf2\x1f\x5b\x0d\xa2\x44\xc8\x0a\x56\x2b\xca\xf8\xf6\xa8\xb2\x47\x1d\x3e\xea\xde\x61\xb7\xc6\x15\xc0\xf9\xc5\xde\xfa\xae\x6d\x37\x41\x72\x2d\xbd\x8b\xfa\xdc\xa5\xbb\x15\x84\x47\x67\x44\x13\xe0\xb2\x6b\xd4\xff\xa1\xe5\xd1\xf8\xbf\x01\x00\x00\xff\xff\x73\x3a\x81\xbe\xfe\x27\x00\x00"

func _fixturesJetson_clocksShBytes() ([]byte, error) {
	return bindataRead(
		__fixturesJetson_clocksSh,
		"_fixtures/jetson_clocks.sh",
	)
}

func _fixturesJetson_clocksSh() (*asset, error) {
	bytes, err := _fixturesJetson_clocksShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_fixtures/jetson_clocks.sh", size: 10238, mode: os.FileMode(493), modTime: time.Unix(1514282879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_fixtures/jetson_clocks.sh": _fixturesJetson_clocksSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"_fixtures": &bintree{nil, map[string]*bintree{
		"jetson_clocks.sh": &bintree{_fixturesJetson_clocksSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

